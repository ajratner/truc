
  deepdive.db.default {
    driver: "org.postgresql.Driver"
    url: "jdbc:postgresql://"${PGHOST}":"${PGPORT}"/"${DBNAME}
    user: ${PGUSER}
    password: ${PGPASSWORD}
    dbname: ${DBNAME}
    host: ${PGHOST}
    port: ${PGPORT}
    incremental_mode: ORIGINAL
    }
    


      deepdive.schema.variables {
        
      }
    

      deepdive.extraction.extractors.extraction_rule_0 {
            sql: """ DROP TABLE IF EXISTS cells CASCADE;
            CREATE TABLE
            cells(table_id text,
     cell_id int,
     words text[],
     type text,
     attributes text[],
     xpos int,
     xspan int,
     ypos int,
     yspan int)
            """
            style: "sql_extractor"
          }

          deepdive.extraction.extractors.extraction_rule_4 {
            sql: """ DROP TABLE IF EXISTS genepheno_features CASCADE;
            CREATE TABLE
            genepheno_features(table_id text,
                  relation_id text,
                  feature text)
            """
            style: "sql_extractor"
          }

          deepdive.extraction.extractors.extraction_rule_1 {
            sql: """ DROP TABLE IF EXISTS gene_mentions CASCADE;
            CREATE TABLE
            gene_mentions(mention_id text,
             table_id text,
             cell_id int,
             entity text,
             word_idxs int[],
             type text,
             is_correct boolean)
            """
            style: "sql_extractor"
          }

          deepdive.extraction.extractors.extraction_rule_3 {
            sql: """ DROP TABLE IF EXISTS genepheno_relations CASCADE;
            CREATE TABLE
            genepheno_relations(relation_id text,
                   table_id text,
                   gene_mention_id text,
                   pheno_mention_id text,
                   type text,
                   is_correct boolean)
            """
            style: "sql_extractor"
          }

          deepdive.extraction.extractors.extraction_rule_2 {
            sql: """ DROP TABLE IF EXISTS pheno_mentions CASCADE;
            CREATE TABLE
            pheno_mentions(mention_id text,
              table_id text,
              cell_id int,
              entity text,
              word_idxs int[],
              type text,
              is_correct boolean)
            """
            style: "sql_extractor"
          }

        deepdive.extraction.extractors.cleanup {
          sql: """
          TRUNCATE cells;
          TRUNCATE genepheno_features;
          TRUNCATE gene_mentions;
          TRUNCATE genepheno_relations;
          TRUNCATE pheno_mentions;
          """
          style: "sql_extractor"
        }

      deepdive.extraction.extractors.extraction_rule_8 {
        sql: """ DROP VIEW IF EXISTS ext_mentions_input;
        CREATE VIEW ext_mentions_input AS 
            SELECT DISTINCT R0.table_id AS "cells.R0.table_id" , R0.cell_id AS "cells.R0.cell_id" , R0.words AS "cells.R0.words" 
            FROM cells R0
        
        """
        style: "sql_extractor"
          
      }
    

      deepdive.extraction.extractors.extraction_rule_5 {
        sql: """ DROP VIEW IF EXISTS cells_serialized;
        CREATE VIEW cells_serialized AS 
            SELECT DISTINCT R0.table_id AS "table_id" , R0.cell_id AS "cell_id" , ARRAY_TO_STRING(R0.words, '|^|') AS "words" , R0.type AS "type" , ARRAY_TO_STRING(R0.attributes, '|^|') AS "attributes" , R0.xpos AS "xpos" , R0.xspan AS "xspan" , R0.ypos AS "ypos" , R0.yspan AS "yspan" 
            FROM cells R0
        
        """
        style: "sql_extractor"
          
      }
    

      deepdive.extraction.extractors.extraction_rule_6 {
        sql: """ DROP VIEW IF EXISTS tables_serialized;
        CREATE VIEW tables_serialized AS 
            SELECT R0.table_id AS "table_id" , ARRAY_TO_STRING(ARRAY_AGG(R0.cell_id), '|~|') AS "cell_ids" , ARRAY_TO_STRING(ARRAY_AGG(R0.words), '|~|') AS "words" , ARRAY_TO_STRING(ARRAY_AGG(R0.type), '|~|') AS "types" , ARRAY_TO_STRING(ARRAY_AGG(R0.attributes), '|~|') AS "attributes" , ARRAY_TO_STRING(ARRAY_AGG(R0.xpos), '|~|') AS "xpos" , ARRAY_TO_STRING(ARRAY_AGG(R0.xspan), '|~|') AS "xspans" , ARRAY_TO_STRING(ARRAY_AGG(R0.ypos), '|~|') AS "ypos" , ARRAY_TO_STRING(ARRAY_AGG(R0.yspan), '|~|') AS "yspans" 
            FROM cells_serialized R0
        
        GROUP BY R0.table_id
        """
        style: "sql_extractor"
          dependencies: [ "extraction_rule_5" ]
      }
    

      deepdive.extraction.extractors.extraction_rule_16 {
        sql: """ DROP VIEW IF EXISTS ext_genepheno_features_input;
        CREATE VIEW ext_genepheno_features_input AS 
            SELECT R0.relation_id AS "genepheno_relations.R0.relation_id" , R0.type AS "genepheno_relations.R0.type" , R0.table_id AS "genepheno_relations.R0.table_id" , R1.cell_id AS "gene_mentions.R1.cell_id" , ARRAY_TO_STRING(R1.word_idxs, '|^|') AS "column_4" , R2.cell_id AS "pheno_mentions.R2.cell_id" , ARRAY_TO_STRING(R2.word_idxs, '|^|') AS "column_6" , R3.cell_ids AS "tables_serialized.R3.cell_ids" , R3.cell_words AS "tables_serialized.R3.cell_words" , R3.cell_types AS "tables_serialized.R3.cell_types" , R3.cell_attribs AS "tables_serialized.R3.cell_attribs" , R3.cell_xpos AS "tables_serialized.R3.cell_xpos" , R3.cell_xspans AS "tables_serialized.R3.cell_xspans" , R3.cell_ypos AS "tables_serialized.R3.cell_ypos" , R3.cell_yspans AS "tables_serialized.R3.cell_yspans" 
            FROM genepheno_relations R0, gene_mentions R1, pheno_mentions R2, tables_serialized R3
        WHERE R1.mention_id = R0.gene_mention_id  AND R1.table_id = R0.table_id  AND R2.mention_id = R0.pheno_mention_id  AND R2.table_id = R0.table_id  AND R3.table_id = R0.table_id 
        """
        style: "sql_extractor"
          dependencies: [ "extraction_rule_14" ,  "extraction_rule_9" ,  "extraction_rule_11" ,  "extraction_rule_6" ]
      }
    

      deepdive.extraction.extractors.extraction_rule_13 {
        sql: """ DROP VIEW IF EXISTS ext_genepheno_relations_input;
        CREATE VIEW ext_genepheno_relations_input AS 
            SELECT R0.table_id AS "gene_mentions.R0.table_id" , R0.mention_id AS "gene_mentions.R0.mention_id" , R0.cell_id AS "gene_mentions.R0.cell_id" , R0.entity AS "gene_mentions.R0.entity" , ARRAY_TO_STRING(R0.word_idxs, '|^|') AS "column_4" , R1.mention_id AS "pheno_mentions.R1.mention_id" , R1.cell_id AS "pheno_mentions.R1.cell_id" , R1.entity AS "pheno_mentions.R1.entity" , ARRAY_TO_STRING(R1.word_idxs, '|^|') AS "column_8" , R2.words AS "cells.R2.words" , R2.type AS "cells.R2.type" , R2.attributes AS "cells.R2.attributes" , R2.xpos AS "cells.R2.xpos" , R2.xspan AS "cells.R2.xspan" , R2.ypos AS "cells.R2.ypos" , R2.yspan AS "cells.R2.yspan" , R3.words AS "cells.R3.words" , R3.type AS "cells.R3.type" , R3.attributes AS "cells.R3.attributes" , R3.xpos AS "cells.R3.xpos" , R3.xspan AS "cells.R3.xspan" , R3.ypos AS "cells.R3.ypos" , R3.yspan AS "cells.R3.yspan" 
            FROM gene_mentions R0, pheno_mentions R1, cells R2, cells R3
        WHERE R1.table_id = R0.table_id  AND R2.table_id = R0.table_id  AND R2.cell_id = R0.cell_id  AND R3.table_id = R0.table_id  AND R3.cell_id = R1.cell_id 
        """
        style: "sql_extractor"
          dependencies: [ "extraction_rule_9" ,  "extraction_rule_11" ]
      }
    

        deepdive.extraction.extractors.extraction_rule_9 {
          input: """ SELECT * FROM ext_mentions_input
          """
          output_relation: "gene_mentions"
          udf: ${APP_HOME}"/udf/extract_gene_mentions.py"
          style: "tsv_extractor" 
          dependencies: [ "extraction_rule_8" ]
        }
      

        deepdive.extraction.extractors.extraction_rule_11 {
          input: """ SELECT * FROM ext_mentions_input
          """
          output_relation: "pheno_mentions"
          udf: ${APP_HOME}"/udf/extract_pheno_mentions.py"
          style: "tsv_extractor" 
          dependencies: [ "extraction_rule_8" ]
        }
      

        deepdive.extraction.extractors.extraction_rule_17 {
          input: """ SELECT * FROM ext_genepheno_features_input
          """
          output_relation: "genepheno_features"
          udf: ${APP_HOME}"/udf/extract_genepheno_features.py"
          style: "tsv_extractor" 
          dependencies: [ "extraction_rule_16" ]
        }
      

        deepdive.extraction.extractors.extraction_rule_14 {
          input: """ SELECT * FROM ext_genepheno_relations_input
          """
          output_relation: "genepheno_relations"
          udf: ${APP_HOME}"/udf/extract_genepheno_relations.py"
          style: "tsv_extractor" 
          dependencies: [ "extraction_rule_13" ]
        }
      
deepdive.pipeline.run: ${PIPELINE}
deepdive.pipeline.pipelines.initdb: [extraction_rule_0, extraction_rule_4, extraction_rule_1, extraction_rule_3, extraction_rule_2]
deepdive.pipeline.pipelines.extraction: [extraction_rule_16, extraction_rule_8, extraction_rule_13, extraction_rule_5, extraction_rule_9, extraction_rule_14, extraction_rule_17, extraction_rule_11, extraction_rule_6]
deepdive.pipeline.pipelines.endtoend: [extraction_rule_16, extraction_rule_8, extraction_rule_13, extraction_rule_5, extraction_rule_9, extraction_rule_14, extraction_rule_17, extraction_rule_11, extraction_rule_6]
deepdive.pipeline.pipelines.cleanup: [cleanup]
